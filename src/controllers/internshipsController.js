import CompanyDB from '../models/companyModel.js';
import ErrorResponse from '../utils/ErrorResponse.js';


/**
 * Get all Internships
 * @route   GET /api/v1/internships
 * @access  Public
 */
export async function getInternships(req, res, next) {
  const dataForRespond = [];
  await CompanyDB.find({}, (err, doc) => {
    if (!err) {
      doc.forEach(company => {
        dataForRespond.push({
          companyName: company.companyName,
          internships: company.internships
        });
      });
    }
  });
  res.status(200).json({
    success: true,
    data: dataForRespond
  });
}

/**
 * Get single Internship
 * @route   GET /api/v1/internships/:id
 * @access  Public
 */
export async function getInternship(req, res, next) {
  const result = await findInternshipInDB(req.params.id);
  if (!result) {
    return next(
      new ErrorResponse(`internship id ${req.params.id} doesn\'t exist`, 404)
    );
  } else {
    res.status(200).json({
      success: true,
      data: result.internship
    });
  }
}

/**
 * Create single Internship
 * @route   POST /api/v1/internships/
 * @access  Private
 * @param {*} req the request from the endpoint, the body is a JSON object: 
 * ```json
 * req.body = {
 * "companyNams": <string>,
 * "internship": <internship_data>
 * }
 * ```
 */
export async function createInternship(req, res, next) {
  const companyName = req.body.companyName;
  const company = await CompanyDB.findOne({
    companyName: `${companyName}`
  });

  if (company) {
    const jobIdToAdd = req.body.internship.jobId;
    company.internships.push(req.body.internship);
    await company.save();
    res.status(201).json({
      success: true,
      data: company.internships.filter(internship => internship.jobId == jobIdToAdd)
    });
  } else {
    return next(new ErrorResponse('Company doesn\'t exist', 403));
  }
}

/**
 * Update single Internship
 * @route   PUT /api/v1/internships/:id
 * @access  Private
 */
export async function updateInternship(req, res, next) {
  const result = await findInternshipInDB(req.params.id);
  if (result) {
    const internship = result.internship;
    const company = result.company;
    internship.set(req.body);
    await company.save();
    res.status(200).json({
      success: true,
      data: company.internships.id(internship.id)
    });
  } else {
    return next(new ErrorResponse(`internship id ${req.params.id} doesn\'t exist`, 404));
  }
}

/**
 * Delete single Internship
 * @route   DELETE /api/v1/internships/:id
 * @access  Private
 */
export async function deleteInternship(req, res, next) {
  const result = await findInternshipInDB(req.params.id);
  if (result) {
    const internship = result.internship;
    const company = result.company;
    internship.remove();
    await company.save();
    res.status(200).json({
      success: true,
    });
  } else {
    return next(new ErrorResponse('internship doesn\'t exist', 400));
  }
}

/**
 * finds the internship and the company who offers it by the id of the internship.
 * @param {string} id The id of the internship generated by mongoose ObjectId.
 * @returns an object containing the internship and the company that offers it, if the internship doesn't exist - returns null.
 */
async function findInternshipInDB(id) {
  const companies = await CompanyDB.find();
  let internship = null;
  let company = null;
  companies.forEach(companyElement => {
    if (!internship) {
      internship = companyElement.internships.id(id);
      company = companyElement;
    }
  });
  let result = null;
  if (internship) {
    result = {
      company,
      internship
    }
  }
  return result;
}